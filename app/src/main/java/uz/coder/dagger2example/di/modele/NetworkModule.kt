package uz.coder.dagger2example.di.modeleimport dagger.Moduleimport dagger.Providesimport okhttp3.OkHttpClientimport okhttp3.logging.HttpLoggingInterceptorimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport uz.coder.dagger2example.BuildConfigimport uz.coder.dagger2example.network.ApiServiceimport javax.inject.Singleton@Moduleclass NetworkModule {    @Provides    @Singleton    fun provideBaseUrl(): String = "https://jsonplaceholder.typicode.com/"    @Provides    @Singleton    fun provideGsonConverterFactory(): GsonConverterFactory = GsonConverterFactory.create()    @Provides    @Singleton    fun provideLoggingInterceptor(): HttpLoggingInterceptor {        val httpLoggingInterceptor = HttpLoggingInterceptor()        if (BuildConfig.DEBUG) {            httpLoggingInterceptor.level = HttpLoggingInterceptor.Level.BODY        } else {            httpLoggingInterceptor.level = HttpLoggingInterceptor.Level.NONE        }        return httpLoggingInterceptor    }    @Provides    @Singleton    fun provideOkhttpClient(httpLoggingInterceptor: HttpLoggingInterceptor): OkHttpClient {        val okHttpClient = OkHttpClient.Builder()        okHttpClient.addInterceptor(httpLoggingInterceptor)        return okHttpClient.build()    }    @Provides    @Singleton    fun provideRetrofit(        baseUrl: String,        gsonConverterFactory: GsonConverterFactory,        okHttpClient: OkHttpClient    ): Retrofit {        return Retrofit.Builder()            .baseUrl(baseUrl)            .client(okHttpClient)            .addConverterFactory(gsonConverterFactory)            .build()    }    @Provides    @Singleton    fun provideApiService(retrofit: Retrofit): ApiService = retrofit.create(ApiService::class.java)}