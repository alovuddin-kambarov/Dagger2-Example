package uz.alovuddin.dagger2.viewmodelsimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.launchimport uz.alovuddin.dagger2.database.entity.UserEntityimport uz.alovuddin.dagger2.repository.UserRepositoryimport uz.alovuddin.dagger2.utils.NetworkHelperimport uz.alovuddin.dagger2.utils.UserResourceimport javax.inject.Injectclass UserViewModel @Inject constructor(    private val userRepository: UserRepository,    private val networkHelper: NetworkHelper) : ViewModel() {    private val stateFlow = MutableStateFlow<UserResource>(UserResource.Loading)    init {        getUsers()    }    private fun getUsers() {        if (networkHelper.isNetworkConnected()) {            viewModelScope.launch {                userRepository.getUsers().catch {                    stateFlow.value = UserResource.Error(it.message ?: "Error")                }.collect { it ->                    if (it.isSuccessful) {                        val arrayList = ArrayList<UserEntity>()                        it.body()?.forEach {                            val userEntity = UserEntity(it.id, it.name, it.username, it.email)                            arrayList.add(userEntity)                        }                       // userRepository.insertDbUsers(arrayList)                     //   stateFlow.value = UserResource.Success(userRepository.getDbUsers())                    }                }            }        } else {            stateFlow.value = UserResource.Error("no internet connection!")        }    }    fun getStateFlow(): StateFlow<UserResource> {        return stateFlow    }}